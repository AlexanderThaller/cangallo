#!/usr/bin/env ruby

# vim:ts=2:sw=2

$: << File.dirname(__FILE__) + "/../lib"

require "rubygems"
require "thor"
require "fileutils"
require "digest"
require "cangallo"

require "pp"

include Cangallo

$config = Config.new

class Canga < Thor
  desc "create FILE [SIZE]", "create a new qcow2 image"
  option :parent, :desc => "id of the parent image"
  def create(file, size=nil)
    puts [file, size]
    Qcow2.create(file, options[:parent], size)
  end

  desc "add FILE", "add a new file to the repository"
  option :parent, :desc => "id of the parent image"
  option :tag, :desc => "tag name of the new image"
  def add(file)
    repo = Repo.new("repo")
    sha1 = repo.add_image(file)

    repo.add_tag(options[:tag], sha1) if options[:tag]
  end

  desc "tag TAGNAME IMAGE", "add a tag name to an existing image"
  def tag(tag, sha1)
    repo = Repo.new("repo")
    repo.add_tag(tag, sha1)
  end

  desc "list", "list images"
  def list()
    repo = Repo.new("repo")

    format = "%-40s %-10s %-10s %-17s"

    puts format % %w{HASH SIZE DISK_SIZE DESCRIPTION}
    reverse_tags = repo.tags.invert

    repo.images.each do |sha1, info|
      tag = reverse_tags[sha1]
      name = sha1[0..15]
      name << " (#{tag})" if tag

      puts format % [name, info["virtual-size"], info["actual-size"], info["description"]]
    end
  end

  desc "show IMAGE", "show information about an image"
  def show(name)
    repo = Repo.new("repo")
    image = repo.get(name)

    if image
      pp image
    else
      SDTERR.puts "No image found with name '#{name}'"
      exit(-1)
    end
  end

  desc "overlay IMAGE FILE", "create a new image based on another one"
  def overlay(sha1, file)
    repo = Repo.new("repo")

    image = repo.images[sha1]

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    path = File.expand_path(repo.image_path(sha1))

    Qcow2.create_from_base(path, file)
  end

  desc "build CANGAFILE", "create a new image using a Cangafile"
  def build(file)
    repo = Repo.new("repo")
    cangafile = Cangafile.new(file)

    puts cangafile.libguestfs_commands

    sha1 = repo.find(cangafile.parent)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    parent_path = File.expand_path(repo.image_path(sha1))

    # temp image path
    temp_image = File.join("repo", "temp-1.qcow2")

    Qcow2.create_from_base(parent_path, temp_image)

    rc = LibGuestfs.virt_customize(temp_image, cangafile.libguestfs_commands)
    exit(-1) if !rc

    rc = LibGuestfs.virt_sparsify(temp_image)
    exit(-1) if !rc

    data = {}
    data["parent"] = sha1
    data["description"] = cangafile.data["description"]
    data["os"] = cangafile.data["os"]
    data["files"] = cangafile.data["files"]
    data["run"] = cangafile.data["run"]

    repo.add_image(temp_image, data)

    puts "Deleting temporary image"
    FileUtils.rm(temp_image)
  end
end

Canga.start(ARGV)


