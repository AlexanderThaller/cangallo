#!/usr/bin/env ruby

# vim:ts=2:sw=2

$: << File.dirname(__FILE__) + "/../lib"

require "rubygems"
require "thor"
require "fileutils"
require "digest"
require "cangallo"
require "tempfile"

require "pp"

include Cangallo

$config = Config.new

class Canga < Thor
  class_option :repo, :desc => 'repository to use'

  desc "create FILE [SIZE]", "create a new qcow2 image"
  option :parent, :desc => "id of the parent image"
  def create(file, size=nil)
    puts [file, size]
    Qcow2.create(file, options[:parent], size)
  end

  desc "add FILE", "add a new file to the repository"
  option :parent, :desc => "id of the parent image"
  option :tag, :desc => "tag name of the new image"
  def add(file)
    repo = $config.repo(options[:repo])
    sha256 = repo.add_image(file)

    repo.add_tag(options[:tag], sha256) if options[:tag]
  end

  desc "tag TAGNAME IMAGE", "add a tag name to an existing image"
  def tag(tag, sha256)
    repo = $config.repo(options[:repo])
    repo.add_tag(tag, sha256)
  end

  desc "list", "list images"
  def list()
    repo = $config.repo(options[:repo])
    repo_name = repo.name

    format = "%-30.30s %11.11s %-30.30s"

    puts format % %w{NAME SIZE DESCRIPTION}
    reverse_tags = repo.tags.invert

    repo.images.each do |sha256, info|
      tag = reverse_tags[sha256]

      if tag
        name = "#{repo_name}:#{tag}"
      else
        name = "#{repo_name}:#{sha256[0..15]}"
      end

      parent_sha256 = repo.get(sha256)["parent"]
      parent = repo.get(parent_sha256) if parent_sha256

      if parent_sha256
        tag = reverse_tags[parent_sha256]

        if tag
          parent_name = "#{repo_name}:#{tag}"
        else
          parent_name = "#{repo_name}:#{parent_sha256[0..15]}"
        end

        name = "*#{name}"
      else
        parent_name = ""
        name = " #{name}"
      end

      size = info["actual-size"].to_f / (1024 * 1024) # Mb
      size = size.round(1)

      puts format % [name, "#{size} Mb", info["description"]]
    end
  end

  desc "show IMAGE", "show information about an image"
  def show(name)
    repo = $config.repo(options[:repo])
    image = repo.get(name)

    if image
      pp image
    else
      SDTERR.puts "No image found with name '#{name}'"
      exit(-1)
    end
  end

  desc "overlay IMAGE FILE", "create a new image based on another one"
  def overlay(sha256, file)
    repo = $config.repo(options[:repo])

    image = repo.find(sha256)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    path = File.expand_path(repo.image_path(sha256))

    Qcow2.create_from_base(path, file)
  end

  desc "build CANGAFILE", "create a new image using a Cangafile"
  def build(file)
    repo = $config.repo(options[:repo])
    cangafile = Cangafile.new(file)

    puts cangafile.libguestfs_commands

    sha256 = repo.find(cangafile.parent)

    if !sha256
      STDERR.puts "Image not found"
      exit(-1)
    end

    parent_path = File.expand_path(repo.image_path(sha256))

    # temp image path
    temp_image = Tempfile.new([File.basename(file), '.qcow2'], repo.path)
    temp_image.close

    Qcow2.create_from_base(parent_path, temp_image.path)

    rc = LibGuestfs.virt_customize(temp_image.path, cangafile.libguestfs_commands)
    exit(-1) if !rc

    rc = LibGuestfs.virt_sparsify(temp_image.path)
    exit(-1) if !rc

    data = {}
    data["parent"] = sha256
    data["description"] = cangafile.data["description"]
    data["os"] = cangafile.data["os"]
    cangafile.data.delete("description")
    cangafile.data.delete("os")

    data["cangafile"] = cangafile.data

    repo.add_image(temp_image.path, data)

    puts "Deleting temporary image"
    temp_image.delete
  end

  desc "fetch", "download the index of the repository"
  def fetch
    repo = $config.repo(options[:repo])

    repo.fetch
  end

  desc "sign", "sign the index file with keybase"
  def sign
    repo = $config.repo(options[:repo])
    repo.sign
  end

  desc "verify", "verify index signature with keybase"
  def verify
    repo = $config.repo(options[:repo])
    repo.verify
  end
end

Canga.start(ARGV)


