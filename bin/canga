#!/usr/bin/env ruby

# vim:ts=2:sw=2

$: << File.dirname(__FILE__) + "/../lib"

require "rubygems"
require "thor"
require "fileutils"
require "digest"
require "cangallo"
require "tempfile"

require "pp"

$cangallo = Cangallo.new

class Canga < Thor
  class_option :repo, :desc => 'repository to use'

  desc "create FILE [SIZE]", "create a new qcow2 image"
  option :parent, :desc => "id of the parent image"
  def create(file, size = nil)
    puts [file, size]
    Cangallo::Qcow2.create(file, options[:parent], size)
  end

  desc "add FILE [REPO]", "add a new file to the repository"
  option :parent, :desc => "id of the parent image"
  option :tag, :desc => "tag name of the new image"
  def add(file, repo_name = nil)
    repo_name = $cangallo.repo(repo_name)
    sha256 = repo.add_image(file)

    repo.add_tag(options[:tag], sha256) if options[:tag]
  end

  desc "del IMAGE", "delete an image from the repo"
  def del(name)
    image = $cangallo.get(name)

    if !image
      STDERR.puts %Q{Image "#{name}" not found}
      exit(-1)
    end

    repo = $cangallo.repo(image["repo"])
    repo.del_image(image["sha256"])
  end

  desc "tag TAGNAME IMAGE", "add a tag name to an existing image"
  def tag(tag, name)
    image = $cangallo.get(name)

    if !image
      STDERR.puts %Q{Image "#{name}" not found}
      exit(-1)
    end

    repo = $cangallo.repo(image['repo'])
    repo.add_tag(tag, image['sha256'])
  end

  desc "deltag TAGNAME", "deletes a tag"
  def deltag(tag)
    repo, name = $cangallo.parse_name(tag)
    image = $cangallo.get(tag)

    if !image
      STDERR.puts %Q{Image "#{name}" not found}
      exit(-1)
    end

    repo = $cangallo.repo(repo)
    repo.del_tag(name)
  end

  desc "list [REPO]", "list images"
  def list(repo_name = nil)
    repo = $cangallo.repo(repo_name)
    repo_name = repo.name

    images = $cangallo.get_images

    format = "%-30.30s %11.11s %-30.30s"

    puts format % %w{NAME SIZE DESCRIPTION}

    images.each do |image|
      parent = image["parent"] ? "^" : " "
      available = image["available"] ? " " : "*"
      name = "#{parent}#{available}#{image["name"]}"

      size = image["size"].to_f / (1024 * 1024) # Mb
      size = size.round(1)

      puts format % [name, "#{size} Mb", image["description"]]
    end
  end

  desc "show IMAGE", "show information about an image"
  def show(name)
    image = $cangallo.get(name)

    if image
      pp image
    else
      SDTERR.puts "No image found with name '#{name}'"
      exit(-1)
    end
  end

  desc "overlay IMAGE FILE", "create a new image based on another one"
  def overlay(name, file)
    image = $cangallo.get(name)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    repo = $cangallo.repo(image['repo'])
    path = File.expand_path(repo.image_path(image['sha256']))

    Cangallo::Qcow2.create_from_base(path, file)
  end

  desc "build CANGAFILE", "create a new image using a Cangafile"
  def build(file)
    cangafile = Cangallo::Cangafile.new(file)

    commands, params = cangafile.render
    puts commands

    begin
      image = $cangallo.get(cangafile.parent)
    rescue => e
      STDERR.puts e.message
      exit(-1)
    end

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    sha256 = image['sha256']
    repo = $cangallo.repo(image['repo'])

    parent_path = File.expand_path(repo.image_path(sha256))

    # temp image path
    temp_image = Tempfile.new([File.basename(file), '.qcow2'], repo.path)
    temp_image.close

    Cangallo::Qcow2.create_from_base(parent_path, temp_image.path)

    rc = Cangallo::LibGuestfs.virt_customize(temp_image.path, commands, params)
    exit(-1) if !rc

    rc = Cangallo::LibGuestfs.virt_sparsify(temp_image.path)
    exit(-1) if !rc

    data = {}
    data["parent"] = sha256
    data["description"] = cangafile.data["description"]
    data["os"] = cangafile.data["os"]
    cangafile.data.delete("description")
    cangafile.data.delete("os")

    data["cangafile"] = cangafile.data

    repo.add_image(temp_image.path, data)

    puts "Deleting temporary image"
    temp_image.delete
  end

  desc "fetch [REPO]", "download the index of the repository"
  def fetch(repo_name = nil)
    repo = $cangallo.repo(repo_name)

    repo.fetch
  end

  desc "sign [REPO]", "sign the index file with keybase"
  def sign(repo_name = nil)
    repo = $cangallo.repo(repo_name)
    repo.sign
  end

  desc "verify [REPO]", "verify index signature with keybase"
  def verify(repo_name = nil)
    repo = $cangallo.repo(repo_name)
    repo.verify
  end

  desc "pull NAME", "downloads an image from a remote repository"
  def pull(name)
    image = $cangallo.get(name)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    repo = $cangallo.repo(image["repo"])
    images = repo.ancestors(image["sha256"])

    images.reverse.each do |img|
      name = $cangallo.short_name(img, image["repo"])
      if File.exist?(repo.image_path(img))
        STDERR.puts "Image #{name} already downloaded"
      else
        STDERR.puts "Downloading #{name}"
        repo.pull(img)
      end
    end
  end

  desc "export IMAGE OUTPUT", "export an image to a file"
  option :format, :desc => "format for output image", :default => :qcow2, :alliases => :f
  option :compress, :desc => "compress output qcow2 image", :default => false, :alliases => :c
  def export(image, output)
    image = $cangallo.get(image)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    repo = $cangallo.repo(image["repo"])
    path = File.expand_path(repo.image_path(image["sha256"]))

    Cangallo::Qcow2.new(path).convert(output,options)
  end

  desc "import IMAGE [repository]", "import an image from a remote repository"
  option :tag, :desc => "tag name of the new image"
  def import(image_name, repo = nil)
    image = $cangallo.get(image_name)

    if !image
      STDERR.puts "Image not found"
      exit(-1)
    end

    sha256 = image["sha256"]

    remote_repo = $cangallo.repo(image["repo"])
    remote_path = remote_repo.image_path(sha256)

    repository = $cangallo.repo(repo)
    image_path = repository.image_path(sha256)

    FileUtils.ln(remote_path, image_path, force: true)

    image.delete("repo")
    repository.add(sha256, image)

    repository.add_tag(options[:tag], sha256) if options[:tag]

    repository.write_index
  end
end

Canga.start(ARGV)


